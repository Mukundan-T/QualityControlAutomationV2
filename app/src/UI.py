# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import files, spreadsheetChecks, preliminaryQC, fileHandler
import os, time
from tkinter import messagebox
import matplotlib.colors as mcolors


class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()
        self.title = 'Quality Control Automation'
        self.left = 20
        self.top = 80
        self.width = 600
        self.height = 360
        self.file = files.ExcelFile(None)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        #MainWindow.resize(682, 401)
        MainWindow.setFixedSize(682, 401)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Menu frame QFrame with all its items
        # Three buttons for program's main function, Header
        self.menuFrame = QtWidgets.QFrame(self.centralwidget)
        self.menuFrame.setGeometry(QtCore.QRect(20, 80, 311, 291))
        self.menuFrame.setStyleSheet("border: 1px solid black;\n"
"border-radius: 6px;")
        self.menuFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.menuFrame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.menuFrame.setLineWidth(2)
        self.menuFrame.setObjectName("menuFrame")

        self.SpreadsheetChecks = QtWidgets.QPushButton(self.menuFrame)
        self.SpreadsheetChecks.setGeometry(QtCore.QRect(20, 50, 271, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.SpreadsheetChecks.setFont(font)
        self.SpreadsheetChecks.setStatusTip("")
        self.SpreadsheetChecks.setAutoFillBackground(False)
        self.SpreadsheetChecks.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"border-style: outset;\n"
"border-radius: 10px;\n"
"border-color: rgb(0, 0, 0);\n"
"padding: 4px;")
        self.SpreadsheetChecks.setObjectName("SpreadsheetChecks")
        self.SpreadsheetChecks.clicked.connect(self.spreadsheetChecks)

        self.PrelimQC = QtWidgets.QPushButton(self.menuFrame)
        self.PrelimQC.setGeometry(QtCore.QRect(20, 130, 271, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.PrelimQC.setFont(font)
        self.PrelimQC.setStatusTip("")
        self.PrelimQC.setWhatsThis("")
        self.PrelimQC.setAutoFillBackground(False)
        self.PrelimQC.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"border-style: outset;\n"
"border-radius: 10px;\n"
"border-color: rgb(0, 0, 0);\n"
"padding: 4px;")
        self.PrelimQC.setObjectName("PrelimQC")
        self.PrelimQC.clicked.connect(self.prelimQC)

        self.FullQC = QtWidgets.QPushButton(self.menuFrame)
        self.FullQC.setGeometry(QtCore.QRect(20, 210, 271, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.FullQC.setFont(font)
        self.FullQC.setMouseTracking(False)
        self.FullQC.setStatusTip("")
        self.FullQC.setAutoFillBackground(False)
        self.FullQC.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"border-style: outset;\n"
"border-radius: 10px;\n"
"border-color: rgb(0, 0, 0);\n"
"padding: 4px;\n"
"hover{background:rgb(248, 248, 248)};")
        self.FullQC.setObjectName("FullQC")

        self.menuHeader = QtWidgets.QLabel(self.menuFrame)
        self.menuHeader.setGeometry(QtCore.QRect(10, 10, 291, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.menuHeader.setFont(font)
        self.menuHeader.setStyleSheet("border: 0px solid black;")
        self.menuHeader.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.menuHeader.setFrameShadow(QtWidgets.QFrame.Raised)
        self.menuHeader.setLineWidth(0)
        self.menuHeader.setAlignment(QtCore.Qt.AlignCenter)
        self.menuHeader.setObjectName("menuHeader")

        # Output frame QFrame with all its items
        # Header, output textbox
        self.outputFrame = QtWidgets.QFrame(self.centralwidget)
        self.outputFrame.setGeometry(QtCore.QRect(340, 180, 321, 191))
        self.outputFrame.setStyleSheet("border: 1px solid black;\n"
"border-radius: 6px;")
        self.outputFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.outputFrame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.outputFrame.setLineWidth(2)
        self.outputFrame.setObjectName("outputFrame")

        self.outputHeader = QtWidgets.QLabel(self.outputFrame)
        self.outputHeader.setGeometry(QtCore.QRect(10, 10, 301, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.outputHeader.setFont(font)
        self.outputHeader.setStyleSheet("border: 0px solid black;")
        self.outputHeader.setAlignment(QtCore.Qt.AlignCenter)
        self.outputHeader.setObjectName("outputHeader")

        self.outputBox = QtWidgets.QTextBrowser(self.outputFrame)
        self.outputBox.setGeometry(QtCore.QRect(10, 40, 301, 131))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.outputBox.setFont(font)
        self.outputBox.setStyleSheet("background-color:rgb(255, 255, 255);\n"
"border-style: outset;\n"
"border-radius: 10px;\n"
"border-color: rgb(0, 0, 0);\n"
"padding: 4px;")
        self.outputBox.setObjectName("outputBox")

        # Color frame QFrame with all its items
        # Heading, line, combobox, button which should change color
        self.colorFrame = QtWidgets.QFrame(self.centralwidget)
        self.colorFrame.setGeometry(QtCore.QRect(340, 80, 321, 91))
        self.colorFrame.setStyleSheet("border: 1px solid black;\n"
"border-radius: 6px;")
        self.colorFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.colorFrame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.colorFrame.setLineWidth(2)
        self.colorFrame.setObjectName("colorFrame")

        self.colorSelectorHeader = QtWidgets.QLabel(self.colorFrame)
        self.colorSelectorHeader.setGeometry(QtCore.QRect(10, 10, 301, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.colorSelectorHeader.setFont(font)
        self.colorSelectorHeader.setStyleSheet("border: 0px solid black;")
        self.colorSelectorHeader.setAlignment(QtCore.Qt.AlignCenter)
        self.colorSelectorHeader.setObjectName("colorSelectorHeader")

        self.colorDisplay = QtWidgets.QPushButton(self.colorFrame)
        self.colorDisplay.setGeometry(QtCore.QRect(20, 45, 21, 21))
        self.colorDisplay.setStyleSheet("background-color: rgb(255, 255, 255)")
        self.colorDisplay.setText("")
        self.colorDisplay.setObjectName("colorDisplay")
        self.colorDisplay.clicked.connect(self.openColorDialog)

        self.errorSelector = QtWidgets.QComboBox(self.colorFrame)
        self.errorSelector.setGeometry(QtCore.QRect(80, 45, 221, 21))
        self.errorSelector.setObjectName("errorSelector")
        for error in self.file.errorColors.keys():
                self.errorSelector.addItem(error)
        for failure in self.file.failColors.keys():
                self.errorSelector.addItem(failure)

        rgb_float = mcolors.hex2color("#" + self.file.errorColors[self.errorSelector.currentText()][2:])
        background_rgb = tuple(int(c * 255) for c in rgb_float)
        self.colorDisplay.setStyleSheet("background-color: rgb" + str(background_rgb))

        self.errorSelector.currentIndexChanged.connect(self.updateColorSelector)

        self.selectionLine = QtWidgets.QFrame(self.colorFrame)
        self.selectionLine.setGeometry(QtCore.QRect(50, 54, 21, 2))
        self.selectionLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.selectionLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.selectionLine.setObjectName("selectionLine")

        # Top portion with all its items
        # Excel logo, search bar, search button
        self.fileInput = QtWidgets.QLineEdit("C://", self.centralwidget)
        self.fileInput.setGeometry(QtCore.QRect(70, 30, 500, 25))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.fileInput.setFont(font)
        self.fileInput.setStyleSheet("background-color:rgb(255, 255, 255);\n"
"border-style: outset;\n"
"border-radius: 1px;")
        #self.fileInput.setFrameShape(QtWidgets.QFrame.StyledPanel)
        #self.fileInput.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.fileInput.setObjectName("fileInput")

        self.excel = QtWidgets.QLabel(self.centralwidget)
        self.excelPixmap = QtGui.QPixmap(os.path.join(os.path.dirname(__file__), 'assets\\excel.png'))
        self.smaller_pixmap = self.excelPixmap.scaled(24, 24, QtCore.Qt.KeepAspectRatio)
        self.excel.setPixmap(self.smaller_pixmap)   
        self.excel.move(25,30)

        self.Search = QtWidgets.QPushButton(self.centralwidget)
        self.Search.setGeometry(QtCore.QRect(580, 33, 71, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(7)
        self.Search.setFont(font)
        self.Search.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"border-style: outset;\n"
"border-radius: 8px;\n"
"border-width: 1px;\n"
"border-color: rgb(0, 0, 0);\n"
"padding: 1px;")
        self.Search.setObjectName("Search")
        self.Search.clicked.connect(self.updateSearchbar)

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def updateSearchbar(self):
        self.file.setFilePath()
        self.fileInput.setText(self.file.filePath)
        self.file.createFileStructure()

    def updateColorSelector(self):
        error = self.errorSelector.currentText()
        if error in self.file.errorColors.keys():
             rgb_float = mcolors.hex2color("#" + self.file.errorColors[error][2:])
        else:
             rgb_float = mcolors.hex2color("#" + self.file.failColors[error][2:])
        background_rgb = tuple(int(c * 255) for c in rgb_float)
        self.colorDisplay.setStyleSheet("background-color: rgb" + str(background_rgb))

    def openColorDialog(self):
        color = QtWidgets.QColorDialog.getColor().name()
        error = self.errorSelector.currentText()

        if color != "#000000":
                if error in self.file.errorColors.keys():
                     self.file.setErrorColor(error, ("FF" + color.upper()[1:]))
                else:
                     self.file.setFailColor(error, ("FF" + color.upper()[1:]))

        self.file.writeErrorColors()
        self.updateColorSelector()


    def spreadsheetChecks(self):

        if self.file.filePath == None:
             messagebox.showerror("Error","You must select an excel file before proceeding")
             return
        
        outputText = ""
        count = 0
        for sheet in self.file.sheetList:
            if count != 0:
                 outputText += "\n"
            spreadsheetChecks.check_date_format(sheet)
            spreadsheetChecks.check_duplicate_filenames(sheet)
            spreadsheetChecks.check_location_filename(sheet)
            outputText += (sheet.sheetName + " error rate: " + str(round(sheet.getErrorRate(), 2)) + "%")
            self.outputBox.setText(outputText)
            count += 1

        success = fileHandler.highlight_errors(self.file)
        if not success:
             messagebox.showerror("Error","The excel file is open in editor so changes could not be saved")
        else:
             self.outputBox.append("** Success! **")

    def prelimQC(self):

        if self.file.filePath == None:
             messagebox.showerror("Error","You must select an excel file before proceeding")
             return
        
        outputText = ""
        count = 0
        for sheet in self.file.sheetList:
            if count != 0:
                 outputText += "\n"
            preliminaryQC.check_files(sheet)
            outputText += (sheet.sheetName + " failure rate: " + str(round(sheet.getFailureRate(), 2)) + "%")
            self.outputBox.setText(outputText)
            count += 1

        self.file.updateDataFrames()
        success = fileHandler.write_excelfile(self.file)
        if success:
                success = fileHandler.highlight_errors(self.file)
                self.outputBox.append("** Success! **")
        else:
                messagebox.showerror("Error","The excel file is open in editor so changes could not be saved")



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.SpreadsheetChecks.setToolTip(_translate("MainWindow", "<html><head/><body><p>Click here to double check spreadsheet entries</p></body></html>"))
        self.SpreadsheetChecks.setText(_translate("MainWindow", "Spreadsheet Checks"))
        self.PrelimQC.setToolTip(_translate("MainWindow", "<html><head/><body><p>Click here to check for missing files and incorrect page numbers</p></body></html>"))
        self.PrelimQC.setText(_translate("MainWindow", "Preliminary QC Checks"))
        self.FullQC.setToolTip(_translate("MainWindow", "<html><head/><body><p>Click here to perform full QC on the remaining files</p></body></html>"))
        self.FullQC.setText(_translate("MainWindow", "Full QC"))
        self.menuHeader.setText(_translate("MainWindow", "Menu"))
        self.outputHeader.setText(_translate("MainWindow", "Output"))
        self.outputBox.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Arial\'; font-size:7pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.colorSelectorHeader.setText(_translate("MainWindow", "Color Selector"))
        self.colorDisplay.setToolTip(_translate("MainWindow", "<html><head/><body><p>Click here to select a new color for this error</p></body></html>"))
        self.Search.setText(_translate("MainWindow", "Search"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
